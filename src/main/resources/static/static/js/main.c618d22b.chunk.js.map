{"version":3,"sources":["client.js","Container.js","Footer.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","type","onClick","showModal","inputBottomMargin","marginBottom","tagStyle","background","color","padding","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","data","setSubmitting","toUpperCase","method","headers","body","JSON","stringify","onSuccess","catch","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","placeholder","onChange","onBlur","value","disabled","openNotification","message","description","notification","errorNotification","antIcon","fontSize","spin","App","state","students","isFetching","visible","fetchStudents","res","setState","closeModal","handleOk","handleCancel","this","CommonElement","length","title","onOk","onCancel","setTimeout","columns","key","render","text","row","index","charAt","dataIndex","indicator","dataSource","rowKey","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c618d22b.chunk.js","sourcesContent":["import fetch from \"unfetch\";\r\n\r\nconst checkStatus = response => {\r\n  if (response.ok) {\r\n    return response;\r\n  } else {\r\n    let error = new Error(response.statusText);\r\n    error.response = response;\r\n    response.json().then(e => {\r\n      error.error = e;\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n};\r\n\r\nexport const getAllStudents = () => fetch(\"/api/students\").then(checkStatus);\r\nexport const addNewStudent = data =>\r\n  fetch(\"/api/students\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(data)\r\n  }).then(checkStatus);\r\n","import React from 'react'\r\nconst Container = (props) => (\r\n  <div style={{width: '1400px', margin:'0 auto', textAlign: 'center'}}>\r\n    {props.children}\r\n  </div>\r\n)\r\nexport default Container","import React from \"react\";\r\nimport Container from \"./Container\";\r\nimport { Button, Avatar } from \"antd\";\r\nimport \"./Footer.css\";\r\nconst Footer = props => (\r\n  <div className=\"footer\">\r\n    <Container>\r\n      {props.numberOfStudents !== undefined ? (\r\n        <Avatar\r\n          style={{ backgroundColor: \"#f56a00\", marginRight: \"5px\" }}\r\n          size=\"large\"\r\n        >\r\n          {props.numberOfStudents}\r\n        </Avatar>\r\n      ) : null}\r\n      <Button type=\"primary\" onClick={props.showModal}>\r\n        Add new student +\r\n      </Button>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Input, Button, Tag } from \"antd\";\r\nimport { addNewStudent } from \"../client\";\r\n\r\nconst inputBottomMargin = { marginBottom: \"10px\" };\r\nconst tagStyle = {\r\n  background: \"#f50\",\r\n  color: \"white\",\r\n  padding: \"5px\",\r\n  ...inputBottomMargin\r\n};\r\nconst AddStudentForm = props => (\r\n  <div>\r\n    <h1>Anywhere in your app!</h1>\r\n    <Formik\r\n      initialValues={{ firstName: \"\", lastName: \"\", email: \"\", gender: \"\" }}\r\n      validate={values => {\r\n        const errors = {};\r\n        if (!values.email) {\r\n          errors.email = \"email Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        if (!values.firstName) {\r\n          errors.firstName = \"firstName Required\";\r\n        }\r\n        if (!values.lastName) {\r\n          errors.lastName = \"lastName Required\";\r\n        }\r\n        if (!values.gender) {\r\n          errors.gender = \"gender Required\";\r\n        } else if (\r\n          ![\"MALE\", \"male\", \"FEMALE\", \"female\"].includes(values.gender)\r\n        ) {\r\n          errors.gender =\r\n            \"gender must be one of 'MALE', 'male', 'FEMALE', 'female'\";\r\n        }\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        values.gender = values.gender.toUpperCase();\r\n        addNewStudent(values)\r\n          .then(() => {\r\n            props.onSuccess();\r\n          })\r\n          .catch(error => {\r\n            props.onFailure(error);\r\n          })\r\n          .finally(() => {\r\n            setSubmitting(false);\r\n          });\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        submitForm,\r\n        isValid\r\n        /* and other goodies */\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <Input\r\n            style={inputBottomMargin}\r\n            name=\"firstName\"\r\n            placeholder=\"firstName\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.firstName}\r\n          />\r\n          {errors.firstName && touched.firstName && (\r\n            <Tag style={tagStyle}>errors.firstName</Tag>\r\n          )}\r\n          <Input\r\n            style={inputBottomMargin}\r\n            name=\"lastName\"\r\n            placeholder=\"lastName\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.lastName}\r\n          />\r\n          {errors.lastName && touched.lastName && (\r\n            <Tag style={tagStyle}>errors.lastName</Tag>\r\n          )}\r\n          <Input\r\n            style={inputBottomMargin}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.email}\r\n          />\r\n          {errors.email && touched.email && (\r\n            <Tag style={tagStyle}>errors.email</Tag>\r\n          )}\r\n          <Input\r\n            style={inputBottomMargin}\r\n            name=\"gender\"\r\n            placeholder=\"gender\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.gender}\r\n          />\r\n          {errors.gender && touched.gender && (\r\n            <Tag style={tagStyle}>errors.gender</Tag>\r\n          )}\r\n          <br />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={isSubmitting | (touched && !isValid)}\r\n            onClick={submitForm}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n);\r\n\r\nexport default AddStudentForm;\r\n","import {  notification } from 'antd';\r\n\r\nexport const openNotification = (type, message, description) => {\r\n  notification[type]({\r\n    message: message,\r\n    description: description\r\n  });\r\n};\r\n\r\nexport const successNotification = (message, description) => {\r\n  openNotification('success', message, description)\r\n}\r\nexport const infoNotification = (message, description) => {\r\n  openNotification('info', message, description)\r\n}\r\nexport const warningNotification = (message, description) => {\r\n  openNotification('warning', message, description)\r\n}\r\nexport const errorNotification = (message, description) => {\r\n  openNotification('error', message, description)\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Avatar, Table, Spin, Icon, Modal, Empty } from \"antd\";\r\nimport { getAllStudents } from \"./client\";\r\nimport Container from \"./Container\";\r\nimport Footer from \"./Footer\";\r\nimport AddStudentForm from \"./forms/AddStudentForm\";\r\nimport { errorNotification, successNotification } from \"./Notification\";\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    students: [],\r\n    isFetching: false,\r\n    visible: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchStudents();\r\n    this.setState({ isFetching: true });\r\n  }\r\n\r\n  fetchStudents = () => {\r\n    getAllStudents()\r\n      .then(res => res.json())\r\n      .then(students => {\r\n        this.setState({ students, isFetching: false })\r\n      })\r\n      .catch(error => {\r\n        const message = error.message;\r\n        const description = error.error.message;\r\n        errorNotification(message, description);\r\n        this.setState({ isFetching: false });\r\n      });\r\n  };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { students, isFetching } = this.state;\r\n    const CommonElement = () => (\r\n      <div>\r\n        <Footer\r\n          numberOfStudents={students.length}\r\n          showModal={this.showModal}\r\n        ></Footer>\r\n        <Modal\r\n          title=\"Basic Modal\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={1000}\r\n        >\r\n          <AddStudentForm\r\n            onSuccess={() => {\r\n              this.fetchStudents();\r\n              successNotification(\"success\", \"success\");\r\n              // close modal after setSubmitting, to escape memory leak\r\n              setTimeout(this.closeModal);\r\n            }}\r\n            onFailure={error => {\r\n              const message = error.message;\r\n              const description = error.error.message;\r\n              errorNotification(message, description);\r\n            }}\r\n          ></AddStudentForm>\r\n        </Modal>\r\n      </div>\r\n    );\r\n    const columns = [\r\n      {\r\n        title: \"Avatar\",\r\n        key: \"avatar\",\r\n        render(text, row, index) {\r\n          return (\r\n            <div>\r\n              <Avatar size=\"large\">{`${row.firstName.charAt(0).toUpperCase() +\r\n                row.lastName.charAt(0).toUpperCase()}`}</Avatar>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        title: \"Student Id\",\r\n        dataIndex: \"studentId\",\r\n        key: \"studentId\"\r\n      },\r\n      {\r\n        title: \"First Name\",\r\n        dataIndex: \"firstName\",\r\n        key: \"firstName\"\r\n      },\r\n      {\r\n        title: \"Last Name\",\r\n        dataIndex: \"lastName\",\r\n        key: \"lastName\"\r\n      },\r\n      {\r\n        title: \"Email\",\r\n        dataIndex: \"email\",\r\n        key: \"email\"\r\n      },\r\n      {\r\n        title: \"Gender\",\r\n        dataIndex: \"gender\",\r\n        key: \"gender\"\r\n      }\r\n    ];\r\n\r\n    if (isFetching) {\r\n      return (\r\n        <Container>\r\n          <Spin indicator={antIcon} />\r\n        </Container>\r\n      );\r\n    }\r\n\r\n    if (students && students.length) {\r\n      return (\r\n        <Container>\r\n          <Table\r\n            dataSource={students}\r\n            columns={columns}\r\n            rowKey=\"studentId\"\r\n            style={{ marginBottom: \"5em\" }}\r\n          />\r\n          <CommonElement></CommonElement>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Empty description={<strong>No students found!</strong>}></Empty>;\r\n        <CommonElement></CommonElement>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}